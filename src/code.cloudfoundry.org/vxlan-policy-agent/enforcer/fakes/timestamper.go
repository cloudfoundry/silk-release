// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/vxlan-policy-agent/enforcer"
)

type TimeStamper struct {
	CurrentTimeStub        func() int64
	currentTimeMutex       sync.RWMutex
	currentTimeArgsForCall []struct {
	}
	currentTimeReturns struct {
		result1 int64
	}
	currentTimeReturnsOnCall map[int]struct {
		result1 int64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TimeStamper) CurrentTime() int64 {
	fake.currentTimeMutex.Lock()
	ret, specificReturn := fake.currentTimeReturnsOnCall[len(fake.currentTimeArgsForCall)]
	fake.currentTimeArgsForCall = append(fake.currentTimeArgsForCall, struct {
	}{})
	stub := fake.CurrentTimeStub
	fakeReturns := fake.currentTimeReturns
	fake.recordInvocation("CurrentTime", []interface{}{})
	fake.currentTimeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TimeStamper) CurrentTimeCallCount() int {
	fake.currentTimeMutex.RLock()
	defer fake.currentTimeMutex.RUnlock()
	return len(fake.currentTimeArgsForCall)
}

func (fake *TimeStamper) CurrentTimeCalls(stub func() int64) {
	fake.currentTimeMutex.Lock()
	defer fake.currentTimeMutex.Unlock()
	fake.CurrentTimeStub = stub
}

func (fake *TimeStamper) CurrentTimeReturns(result1 int64) {
	fake.currentTimeMutex.Lock()
	defer fake.currentTimeMutex.Unlock()
	fake.CurrentTimeStub = nil
	fake.currentTimeReturns = struct {
		result1 int64
	}{result1}
}

func (fake *TimeStamper) CurrentTimeReturnsOnCall(i int, result1 int64) {
	fake.currentTimeMutex.Lock()
	defer fake.currentTimeMutex.Unlock()
	fake.CurrentTimeStub = nil
	if fake.currentTimeReturnsOnCall == nil {
		fake.currentTimeReturnsOnCall = make(map[int]struct {
			result1 int64
		})
	}
	fake.currentTimeReturnsOnCall[i] = struct {
		result1 int64
	}{result1}
}

func (fake *TimeStamper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.currentTimeMutex.RLock()
	defer fake.currentTimeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TimeStamper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ enforcer.TimeStamper = new(TimeStamper)
