// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/vxlan-policy-agent/converger"
	"code.cloudfoundry.org/vxlan-policy-agent/enforcer"
)

type Planner struct {
	GetASGRulesAndChainsStub        func(...string) ([]enforcer.RulesWithChain, error)
	getASGRulesAndChainsMutex       sync.RWMutex
	getASGRulesAndChainsArgsForCall []struct {
		arg1 []string
	}
	getASGRulesAndChainsReturns struct {
		result1 []enforcer.RulesWithChain
		result2 error
	}
	getASGRulesAndChainsReturnsOnCall map[int]struct {
		result1 []enforcer.RulesWithChain
		result2 error
	}
	GetPolicyRulesAndChainStub        func() (enforcer.RulesWithChain, error)
	getPolicyRulesAndChainMutex       sync.RWMutex
	getPolicyRulesAndChainArgsForCall []struct {
	}
	getPolicyRulesAndChainReturns struct {
		result1 enforcer.RulesWithChain
		result2 error
	}
	getPolicyRulesAndChainReturnsOnCall map[int]struct {
		result1 enforcer.RulesWithChain
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Planner) GetASGRulesAndChains(arg1 ...string) ([]enforcer.RulesWithChain, error) {
	fake.getASGRulesAndChainsMutex.Lock()
	ret, specificReturn := fake.getASGRulesAndChainsReturnsOnCall[len(fake.getASGRulesAndChainsArgsForCall)]
	fake.getASGRulesAndChainsArgsForCall = append(fake.getASGRulesAndChainsArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.GetASGRulesAndChainsStub
	fakeReturns := fake.getASGRulesAndChainsReturns
	fake.recordInvocation("GetASGRulesAndChains", []interface{}{arg1})
	fake.getASGRulesAndChainsMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Planner) GetASGRulesAndChainsCallCount() int {
	fake.getASGRulesAndChainsMutex.RLock()
	defer fake.getASGRulesAndChainsMutex.RUnlock()
	return len(fake.getASGRulesAndChainsArgsForCall)
}

func (fake *Planner) GetASGRulesAndChainsCalls(stub func(...string) ([]enforcer.RulesWithChain, error)) {
	fake.getASGRulesAndChainsMutex.Lock()
	defer fake.getASGRulesAndChainsMutex.Unlock()
	fake.GetASGRulesAndChainsStub = stub
}

func (fake *Planner) GetASGRulesAndChainsArgsForCall(i int) []string {
	fake.getASGRulesAndChainsMutex.RLock()
	defer fake.getASGRulesAndChainsMutex.RUnlock()
	argsForCall := fake.getASGRulesAndChainsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Planner) GetASGRulesAndChainsReturns(result1 []enforcer.RulesWithChain, result2 error) {
	fake.getASGRulesAndChainsMutex.Lock()
	defer fake.getASGRulesAndChainsMutex.Unlock()
	fake.GetASGRulesAndChainsStub = nil
	fake.getASGRulesAndChainsReturns = struct {
		result1 []enforcer.RulesWithChain
		result2 error
	}{result1, result2}
}

func (fake *Planner) GetASGRulesAndChainsReturnsOnCall(i int, result1 []enforcer.RulesWithChain, result2 error) {
	fake.getASGRulesAndChainsMutex.Lock()
	defer fake.getASGRulesAndChainsMutex.Unlock()
	fake.GetASGRulesAndChainsStub = nil
	if fake.getASGRulesAndChainsReturnsOnCall == nil {
		fake.getASGRulesAndChainsReturnsOnCall = make(map[int]struct {
			result1 []enforcer.RulesWithChain
			result2 error
		})
	}
	fake.getASGRulesAndChainsReturnsOnCall[i] = struct {
		result1 []enforcer.RulesWithChain
		result2 error
	}{result1, result2}
}

func (fake *Planner) GetPolicyRulesAndChain() (enforcer.RulesWithChain, error) {
	fake.getPolicyRulesAndChainMutex.Lock()
	ret, specificReturn := fake.getPolicyRulesAndChainReturnsOnCall[len(fake.getPolicyRulesAndChainArgsForCall)]
	fake.getPolicyRulesAndChainArgsForCall = append(fake.getPolicyRulesAndChainArgsForCall, struct {
	}{})
	stub := fake.GetPolicyRulesAndChainStub
	fakeReturns := fake.getPolicyRulesAndChainReturns
	fake.recordInvocation("GetPolicyRulesAndChain", []interface{}{})
	fake.getPolicyRulesAndChainMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Planner) GetPolicyRulesAndChainCallCount() int {
	fake.getPolicyRulesAndChainMutex.RLock()
	defer fake.getPolicyRulesAndChainMutex.RUnlock()
	return len(fake.getPolicyRulesAndChainArgsForCall)
}

func (fake *Planner) GetPolicyRulesAndChainCalls(stub func() (enforcer.RulesWithChain, error)) {
	fake.getPolicyRulesAndChainMutex.Lock()
	defer fake.getPolicyRulesAndChainMutex.Unlock()
	fake.GetPolicyRulesAndChainStub = stub
}

func (fake *Planner) GetPolicyRulesAndChainReturns(result1 enforcer.RulesWithChain, result2 error) {
	fake.getPolicyRulesAndChainMutex.Lock()
	defer fake.getPolicyRulesAndChainMutex.Unlock()
	fake.GetPolicyRulesAndChainStub = nil
	fake.getPolicyRulesAndChainReturns = struct {
		result1 enforcer.RulesWithChain
		result2 error
	}{result1, result2}
}

func (fake *Planner) GetPolicyRulesAndChainReturnsOnCall(i int, result1 enforcer.RulesWithChain, result2 error) {
	fake.getPolicyRulesAndChainMutex.Lock()
	defer fake.getPolicyRulesAndChainMutex.Unlock()
	fake.GetPolicyRulesAndChainStub = nil
	if fake.getPolicyRulesAndChainReturnsOnCall == nil {
		fake.getPolicyRulesAndChainReturnsOnCall = make(map[int]struct {
			result1 enforcer.RulesWithChain
			result2 error
		})
	}
	fake.getPolicyRulesAndChainReturnsOnCall[i] = struct {
		result1 enforcer.RulesWithChain
		result2 error
	}{result1, result2}
}

func (fake *Planner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getASGRulesAndChainsMutex.RLock()
	defer fake.getASGRulesAndChainsMutex.RUnlock()
	fake.getPolicyRulesAndChainMutex.RLock()
	defer fake.getPolicyRulesAndChainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Planner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ converger.Planner = new(Planner)
