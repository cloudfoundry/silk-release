// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/vxlan-policy-agent/enforcer"
)

type RuleEnforcer struct {
	EnforceRulesAndChainStub        func(enforcer.RulesWithChain) error
	enforceRulesAndChainMutex       sync.RWMutex
	enforceRulesAndChainArgsForCall []struct {
		arg1 enforcer.RulesWithChain
	}
	enforceRulesAndChainReturns struct {
		result1 error
	}
	enforceRulesAndChainReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RuleEnforcer) EnforceRulesAndChain(arg1 enforcer.RulesWithChain) error {
	fake.enforceRulesAndChainMutex.Lock()
	ret, specificReturn := fake.enforceRulesAndChainReturnsOnCall[len(fake.enforceRulesAndChainArgsForCall)]
	fake.enforceRulesAndChainArgsForCall = append(fake.enforceRulesAndChainArgsForCall, struct {
		arg1 enforcer.RulesWithChain
	}{arg1})
	stub := fake.EnforceRulesAndChainStub
	fakeReturns := fake.enforceRulesAndChainReturns
	fake.recordInvocation("EnforceRulesAndChain", []interface{}{arg1})
	fake.enforceRulesAndChainMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RuleEnforcer) EnforceRulesAndChainCallCount() int {
	fake.enforceRulesAndChainMutex.RLock()
	defer fake.enforceRulesAndChainMutex.RUnlock()
	return len(fake.enforceRulesAndChainArgsForCall)
}

func (fake *RuleEnforcer) EnforceRulesAndChainCalls(stub func(enforcer.RulesWithChain) error) {
	fake.enforceRulesAndChainMutex.Lock()
	defer fake.enforceRulesAndChainMutex.Unlock()
	fake.EnforceRulesAndChainStub = stub
}

func (fake *RuleEnforcer) EnforceRulesAndChainArgsForCall(i int) enforcer.RulesWithChain {
	fake.enforceRulesAndChainMutex.RLock()
	defer fake.enforceRulesAndChainMutex.RUnlock()
	argsForCall := fake.enforceRulesAndChainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *RuleEnforcer) EnforceRulesAndChainReturns(result1 error) {
	fake.enforceRulesAndChainMutex.Lock()
	defer fake.enforceRulesAndChainMutex.Unlock()
	fake.EnforceRulesAndChainStub = nil
	fake.enforceRulesAndChainReturns = struct {
		result1 error
	}{result1}
}

func (fake *RuleEnforcer) EnforceRulesAndChainReturnsOnCall(i int, result1 error) {
	fake.enforceRulesAndChainMutex.Lock()
	defer fake.enforceRulesAndChainMutex.Unlock()
	fake.EnforceRulesAndChainStub = nil
	if fake.enforceRulesAndChainReturnsOnCall == nil {
		fake.enforceRulesAndChainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enforceRulesAndChainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RuleEnforcer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enforceRulesAndChainMutex.RLock()
	defer fake.enforceRulesAndChainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RuleEnforcer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
