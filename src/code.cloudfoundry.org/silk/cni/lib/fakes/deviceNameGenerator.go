// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net"
	"sync"
)

type DeviceNameGenerator struct {
	GenerateForHostIFBStub        func(containerIP net.IP) (string, error)
	generateForHostIFBMutex       sync.RWMutex
	generateForHostIFBArgsForCall []struct {
		containerIP net.IP
	}
	generateForHostIFBReturns struct {
		result1 string
		result2 error
	}
	generateForHostIFBReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeviceNameGenerator) GenerateForHostIFB(containerIP net.IP) (string, error) {
	fake.generateForHostIFBMutex.Lock()
	ret, specificReturn := fake.generateForHostIFBReturnsOnCall[len(fake.generateForHostIFBArgsForCall)]
	fake.generateForHostIFBArgsForCall = append(fake.generateForHostIFBArgsForCall, struct {
		containerIP net.IP
	}{containerIP})
	fake.recordInvocation("GenerateForHostIFB", []interface{}{containerIP})
	fake.generateForHostIFBMutex.Unlock()
	if fake.GenerateForHostIFBStub != nil {
		return fake.GenerateForHostIFBStub(containerIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateForHostIFBReturns.result1, fake.generateForHostIFBReturns.result2
}

func (fake *DeviceNameGenerator) GenerateForHostIFBCallCount() int {
	fake.generateForHostIFBMutex.RLock()
	defer fake.generateForHostIFBMutex.RUnlock()
	return len(fake.generateForHostIFBArgsForCall)
}

func (fake *DeviceNameGenerator) GenerateForHostIFBArgsForCall(i int) net.IP {
	fake.generateForHostIFBMutex.RLock()
	defer fake.generateForHostIFBMutex.RUnlock()
	return fake.generateForHostIFBArgsForCall[i].containerIP
}

func (fake *DeviceNameGenerator) GenerateForHostIFBReturns(result1 string, result2 error) {
	fake.GenerateForHostIFBStub = nil
	fake.generateForHostIFBReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DeviceNameGenerator) GenerateForHostIFBReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateForHostIFBStub = nil
	if fake.generateForHostIFBReturnsOnCall == nil {
		fake.generateForHostIFBReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateForHostIFBReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DeviceNameGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateForHostIFBMutex.RLock()
	defer fake.generateForHostIFBMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DeviceNameGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
