// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type SysctlAdapter struct {
	SysctlStub        func(string, ...string) (string, error)
	sysctlMutex       sync.RWMutex
	sysctlArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	sysctlReturns struct {
		result1 string
		result2 error
	}
	sysctlReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SysctlAdapter) Sysctl(arg1 string, arg2 ...string) (string, error) {
	fake.sysctlMutex.Lock()
	ret, specificReturn := fake.sysctlReturnsOnCall[len(fake.sysctlArgsForCall)]
	fake.sysctlArgsForCall = append(fake.sysctlArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.SysctlStub
	fakeReturns := fake.sysctlReturns
	fake.recordInvocation("Sysctl", []interface{}{arg1, arg2})
	fake.sysctlMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SysctlAdapter) SysctlCallCount() int {
	fake.sysctlMutex.RLock()
	defer fake.sysctlMutex.RUnlock()
	return len(fake.sysctlArgsForCall)
}

func (fake *SysctlAdapter) SysctlCalls(stub func(string, ...string) (string, error)) {
	fake.sysctlMutex.Lock()
	defer fake.sysctlMutex.Unlock()
	fake.SysctlStub = stub
}

func (fake *SysctlAdapter) SysctlArgsForCall(i int) (string, []string) {
	fake.sysctlMutex.RLock()
	defer fake.sysctlMutex.RUnlock()
	argsForCall := fake.sysctlArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *SysctlAdapter) SysctlReturns(result1 string, result2 error) {
	fake.sysctlMutex.Lock()
	defer fake.sysctlMutex.Unlock()
	fake.SysctlStub = nil
	fake.sysctlReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *SysctlAdapter) SysctlReturnsOnCall(i int, result1 string, result2 error) {
	fake.sysctlMutex.Lock()
	defer fake.sysctlMutex.Unlock()
	fake.SysctlStub = nil
	if fake.sysctlReturnsOnCall == nil {
		fake.sysctlReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.sysctlReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *SysctlAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sysctlMutex.RLock()
	defer fake.sysctlMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SysctlAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
