// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net"
	"sync"
)

type HardwareAddressGenerator struct {
	GenerateForContainerStub        func(containerIP net.IP) (net.HardwareAddr, error)
	generateForContainerMutex       sync.RWMutex
	generateForContainerArgsForCall []struct {
		containerIP net.IP
	}
	generateForContainerReturns struct {
		result1 net.HardwareAddr
		result2 error
	}
	generateForContainerReturnsOnCall map[int]struct {
		result1 net.HardwareAddr
		result2 error
	}
	GenerateForHostStub        func(containerIP net.IP) (net.HardwareAddr, error)
	generateForHostMutex       sync.RWMutex
	generateForHostArgsForCall []struct {
		containerIP net.IP
	}
	generateForHostReturns struct {
		result1 net.HardwareAddr
		result2 error
	}
	generateForHostReturnsOnCall map[int]struct {
		result1 net.HardwareAddr
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HardwareAddressGenerator) GenerateForContainer(containerIP net.IP) (net.HardwareAddr, error) {
	fake.generateForContainerMutex.Lock()
	ret, specificReturn := fake.generateForContainerReturnsOnCall[len(fake.generateForContainerArgsForCall)]
	fake.generateForContainerArgsForCall = append(fake.generateForContainerArgsForCall, struct {
		containerIP net.IP
	}{containerIP})
	fake.recordInvocation("GenerateForContainer", []interface{}{containerIP})
	fake.generateForContainerMutex.Unlock()
	if fake.GenerateForContainerStub != nil {
		return fake.GenerateForContainerStub(containerIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateForContainerReturns.result1, fake.generateForContainerReturns.result2
}

func (fake *HardwareAddressGenerator) GenerateForContainerCallCount() int {
	fake.generateForContainerMutex.RLock()
	defer fake.generateForContainerMutex.RUnlock()
	return len(fake.generateForContainerArgsForCall)
}

func (fake *HardwareAddressGenerator) GenerateForContainerArgsForCall(i int) net.IP {
	fake.generateForContainerMutex.RLock()
	defer fake.generateForContainerMutex.RUnlock()
	return fake.generateForContainerArgsForCall[i].containerIP
}

func (fake *HardwareAddressGenerator) GenerateForContainerReturns(result1 net.HardwareAddr, result2 error) {
	fake.GenerateForContainerStub = nil
	fake.generateForContainerReturns = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HardwareAddressGenerator) GenerateForContainerReturnsOnCall(i int, result1 net.HardwareAddr, result2 error) {
	fake.GenerateForContainerStub = nil
	if fake.generateForContainerReturnsOnCall == nil {
		fake.generateForContainerReturnsOnCall = make(map[int]struct {
			result1 net.HardwareAddr
			result2 error
		})
	}
	fake.generateForContainerReturnsOnCall[i] = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HardwareAddressGenerator) GenerateForHost(containerIP net.IP) (net.HardwareAddr, error) {
	fake.generateForHostMutex.Lock()
	ret, specificReturn := fake.generateForHostReturnsOnCall[len(fake.generateForHostArgsForCall)]
	fake.generateForHostArgsForCall = append(fake.generateForHostArgsForCall, struct {
		containerIP net.IP
	}{containerIP})
	fake.recordInvocation("GenerateForHost", []interface{}{containerIP})
	fake.generateForHostMutex.Unlock()
	if fake.GenerateForHostStub != nil {
		return fake.GenerateForHostStub(containerIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateForHostReturns.result1, fake.generateForHostReturns.result2
}

func (fake *HardwareAddressGenerator) GenerateForHostCallCount() int {
	fake.generateForHostMutex.RLock()
	defer fake.generateForHostMutex.RUnlock()
	return len(fake.generateForHostArgsForCall)
}

func (fake *HardwareAddressGenerator) GenerateForHostArgsForCall(i int) net.IP {
	fake.generateForHostMutex.RLock()
	defer fake.generateForHostMutex.RUnlock()
	return fake.generateForHostArgsForCall[i].containerIP
}

func (fake *HardwareAddressGenerator) GenerateForHostReturns(result1 net.HardwareAddr, result2 error) {
	fake.GenerateForHostStub = nil
	fake.generateForHostReturns = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HardwareAddressGenerator) GenerateForHostReturnsOnCall(i int, result1 net.HardwareAddr, result2 error) {
	fake.GenerateForHostStub = nil
	if fake.generateForHostReturnsOnCall == nil {
		fake.generateForHostReturnsOnCall = make(map[int]struct {
			result1 net.HardwareAddr
			result2 error
		})
	}
	fake.generateForHostReturnsOnCall[i] = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HardwareAddressGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateForContainerMutex.RLock()
	defer fake.generateForContainerMutex.RUnlock()
	fake.generateForHostMutex.RLock()
	defer fake.generateForHostMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HardwareAddressGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
