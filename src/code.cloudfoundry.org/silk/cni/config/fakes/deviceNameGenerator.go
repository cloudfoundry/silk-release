// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net"
	"sync"
)

type DeviceNameGenerator struct {
	GenerateForHostStub        func(containerIP net.IP) (string, error)
	generateForHostMutex       sync.RWMutex
	generateForHostArgsForCall []struct {
		containerIP net.IP
	}
	generateForHostReturns struct {
		result1 string
		result2 error
	}
	generateForHostReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GenerateTemporaryForContainerStub        func(containerIP net.IP) (string, error)
	generateTemporaryForContainerMutex       sync.RWMutex
	generateTemporaryForContainerArgsForCall []struct {
		containerIP net.IP
	}
	generateTemporaryForContainerReturns struct {
		result1 string
		result2 error
	}
	generateTemporaryForContainerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeviceNameGenerator) GenerateForHost(containerIP net.IP) (string, error) {
	fake.generateForHostMutex.Lock()
	ret, specificReturn := fake.generateForHostReturnsOnCall[len(fake.generateForHostArgsForCall)]
	fake.generateForHostArgsForCall = append(fake.generateForHostArgsForCall, struct {
		containerIP net.IP
	}{containerIP})
	fake.recordInvocation("GenerateForHost", []interface{}{containerIP})
	fake.generateForHostMutex.Unlock()
	if fake.GenerateForHostStub != nil {
		return fake.GenerateForHostStub(containerIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateForHostReturns.result1, fake.generateForHostReturns.result2
}

func (fake *DeviceNameGenerator) GenerateForHostCallCount() int {
	fake.generateForHostMutex.RLock()
	defer fake.generateForHostMutex.RUnlock()
	return len(fake.generateForHostArgsForCall)
}

func (fake *DeviceNameGenerator) GenerateForHostArgsForCall(i int) net.IP {
	fake.generateForHostMutex.RLock()
	defer fake.generateForHostMutex.RUnlock()
	return fake.generateForHostArgsForCall[i].containerIP
}

func (fake *DeviceNameGenerator) GenerateForHostReturns(result1 string, result2 error) {
	fake.GenerateForHostStub = nil
	fake.generateForHostReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DeviceNameGenerator) GenerateForHostReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateForHostStub = nil
	if fake.generateForHostReturnsOnCall == nil {
		fake.generateForHostReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateForHostReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DeviceNameGenerator) GenerateTemporaryForContainer(containerIP net.IP) (string, error) {
	fake.generateTemporaryForContainerMutex.Lock()
	ret, specificReturn := fake.generateTemporaryForContainerReturnsOnCall[len(fake.generateTemporaryForContainerArgsForCall)]
	fake.generateTemporaryForContainerArgsForCall = append(fake.generateTemporaryForContainerArgsForCall, struct {
		containerIP net.IP
	}{containerIP})
	fake.recordInvocation("GenerateTemporaryForContainer", []interface{}{containerIP})
	fake.generateTemporaryForContainerMutex.Unlock()
	if fake.GenerateTemporaryForContainerStub != nil {
		return fake.GenerateTemporaryForContainerStub(containerIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateTemporaryForContainerReturns.result1, fake.generateTemporaryForContainerReturns.result2
}

func (fake *DeviceNameGenerator) GenerateTemporaryForContainerCallCount() int {
	fake.generateTemporaryForContainerMutex.RLock()
	defer fake.generateTemporaryForContainerMutex.RUnlock()
	return len(fake.generateTemporaryForContainerArgsForCall)
}

func (fake *DeviceNameGenerator) GenerateTemporaryForContainerArgsForCall(i int) net.IP {
	fake.generateTemporaryForContainerMutex.RLock()
	defer fake.generateTemporaryForContainerMutex.RUnlock()
	return fake.generateTemporaryForContainerArgsForCall[i].containerIP
}

func (fake *DeviceNameGenerator) GenerateTemporaryForContainerReturns(result1 string, result2 error) {
	fake.GenerateTemporaryForContainerStub = nil
	fake.generateTemporaryForContainerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DeviceNameGenerator) GenerateTemporaryForContainerReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateTemporaryForContainerStub = nil
	if fake.generateTemporaryForContainerReturnsOnCall == nil {
		fake.generateTemporaryForContainerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateTemporaryForContainerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DeviceNameGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateForHostMutex.RLock()
	defer fake.generateForHostMutex.RUnlock()
	fake.generateTemporaryForContainerMutex.RLock()
	defer fake.generateTemporaryForContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DeviceNameGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
