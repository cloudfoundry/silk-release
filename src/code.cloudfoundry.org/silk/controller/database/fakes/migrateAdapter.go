// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/controller/database"
	migrate "github.com/rubenv/sql-migrate"
)

type MigrateAdapter struct {
	ExecStub        func(database.Db, string, migrate.MigrationSource, migrate.MigrationDirection) (int, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		arg1 database.Db
		arg2 string
		arg3 migrate.MigrationSource
		arg4 migrate.MigrationDirection
	}
	execReturns struct {
		result1 int
		result2 error
	}
	execReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MigrateAdapter) Exec(arg1 database.Db, arg2 string, arg3 migrate.MigrationSource, arg4 migrate.MigrationDirection) (int, error) {
	fake.execMutex.Lock()
	ret, specificReturn := fake.execReturnsOnCall[len(fake.execArgsForCall)]
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		arg1 database.Db
		arg2 string
		arg3 migrate.MigrationSource
		arg4 migrate.MigrationDirection
	}{arg1, arg2, arg3, arg4})
	stub := fake.ExecStub
	fakeReturns := fake.execReturns
	fake.recordInvocation("Exec", []interface{}{arg1, arg2, arg3, arg4})
	fake.execMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MigrateAdapter) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *MigrateAdapter) ExecCalls(stub func(database.Db, string, migrate.MigrationSource, migrate.MigrationDirection) (int, error)) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = stub
}

func (fake *MigrateAdapter) ExecArgsForCall(i int) (database.Db, string, migrate.MigrationSource, migrate.MigrationDirection) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	argsForCall := fake.execArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *MigrateAdapter) ExecReturns(result1 int, result2 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *MigrateAdapter) ExecReturnsOnCall(i int, result1 int, result2 error) {
	fake.execMutex.Lock()
	defer fake.execMutex.Unlock()
	fake.ExecStub = nil
	if fake.execReturnsOnCall == nil {
		fake.execReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.execReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *MigrateAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MigrateAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
