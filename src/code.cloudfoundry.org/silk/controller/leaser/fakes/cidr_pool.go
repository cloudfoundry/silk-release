// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type CIDRPool struct {
	GetAvailableBlockStub        func([]string) string
	getAvailableBlockMutex       sync.RWMutex
	getAvailableBlockArgsForCall []struct {
		arg1 []string
	}
	getAvailableBlockReturns struct {
		result1 string
	}
	getAvailableBlockReturnsOnCall map[int]struct {
		result1 string
	}
	GetAvailableSingleIPStub        func([]string) string
	getAvailableSingleIPMutex       sync.RWMutex
	getAvailableSingleIPArgsForCall []struct {
		arg1 []string
	}
	getAvailableSingleIPReturns struct {
		result1 string
	}
	getAvailableSingleIPReturnsOnCall map[int]struct {
		result1 string
	}
	IsMemberStub        func(string) bool
	isMemberMutex       sync.RWMutex
	isMemberArgsForCall []struct {
		arg1 string
	}
	isMemberReturns struct {
		result1 bool
	}
	isMemberReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CIDRPool) GetAvailableBlock(arg1 []string) string {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getAvailableBlockMutex.Lock()
	ret, specificReturn := fake.getAvailableBlockReturnsOnCall[len(fake.getAvailableBlockArgsForCall)]
	fake.getAvailableBlockArgsForCall = append(fake.getAvailableBlockArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("GetAvailableBlock", []interface{}{arg1Copy})
	fake.getAvailableBlockMutex.Unlock()
	if fake.GetAvailableBlockStub != nil {
		return fake.GetAvailableBlockStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getAvailableBlockReturns.result1
}

func (fake *CIDRPool) GetAvailableBlockCallCount() int {
	fake.getAvailableBlockMutex.RLock()
	defer fake.getAvailableBlockMutex.RUnlock()
	return len(fake.getAvailableBlockArgsForCall)
}

func (fake *CIDRPool) GetAvailableBlockArgsForCall(i int) []string {
	fake.getAvailableBlockMutex.RLock()
	defer fake.getAvailableBlockMutex.RUnlock()
	return fake.getAvailableBlockArgsForCall[i].arg1
}

func (fake *CIDRPool) GetAvailableBlockReturns(result1 string) {
	fake.GetAvailableBlockStub = nil
	fake.getAvailableBlockReturns = struct {
		result1 string
	}{result1}
}

func (fake *CIDRPool) GetAvailableBlockReturnsOnCall(i int, result1 string) {
	fake.GetAvailableBlockStub = nil
	if fake.getAvailableBlockReturnsOnCall == nil {
		fake.getAvailableBlockReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAvailableBlockReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *CIDRPool) GetAvailableSingleIP(arg1 []string) string {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getAvailableSingleIPMutex.Lock()
	ret, specificReturn := fake.getAvailableSingleIPReturnsOnCall[len(fake.getAvailableSingleIPArgsForCall)]
	fake.getAvailableSingleIPArgsForCall = append(fake.getAvailableSingleIPArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("GetAvailableSingleIP", []interface{}{arg1Copy})
	fake.getAvailableSingleIPMutex.Unlock()
	if fake.GetAvailableSingleIPStub != nil {
		return fake.GetAvailableSingleIPStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getAvailableSingleIPReturns.result1
}

func (fake *CIDRPool) GetAvailableSingleIPCallCount() int {
	fake.getAvailableSingleIPMutex.RLock()
	defer fake.getAvailableSingleIPMutex.RUnlock()
	return len(fake.getAvailableSingleIPArgsForCall)
}

func (fake *CIDRPool) GetAvailableSingleIPArgsForCall(i int) []string {
	fake.getAvailableSingleIPMutex.RLock()
	defer fake.getAvailableSingleIPMutex.RUnlock()
	return fake.getAvailableSingleIPArgsForCall[i].arg1
}

func (fake *CIDRPool) GetAvailableSingleIPReturns(result1 string) {
	fake.GetAvailableSingleIPStub = nil
	fake.getAvailableSingleIPReturns = struct {
		result1 string
	}{result1}
}

func (fake *CIDRPool) GetAvailableSingleIPReturnsOnCall(i int, result1 string) {
	fake.GetAvailableSingleIPStub = nil
	if fake.getAvailableSingleIPReturnsOnCall == nil {
		fake.getAvailableSingleIPReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAvailableSingleIPReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *CIDRPool) IsMember(arg1 string) bool {
	fake.isMemberMutex.Lock()
	ret, specificReturn := fake.isMemberReturnsOnCall[len(fake.isMemberArgsForCall)]
	fake.isMemberArgsForCall = append(fake.isMemberArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsMember", []interface{}{arg1})
	fake.isMemberMutex.Unlock()
	if fake.IsMemberStub != nil {
		return fake.IsMemberStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isMemberReturns.result1
}

func (fake *CIDRPool) IsMemberCallCount() int {
	fake.isMemberMutex.RLock()
	defer fake.isMemberMutex.RUnlock()
	return len(fake.isMemberArgsForCall)
}

func (fake *CIDRPool) IsMemberArgsForCall(i int) string {
	fake.isMemberMutex.RLock()
	defer fake.isMemberMutex.RUnlock()
	return fake.isMemberArgsForCall[i].arg1
}

func (fake *CIDRPool) IsMemberReturns(result1 bool) {
	fake.IsMemberStub = nil
	fake.isMemberReturns = struct {
		result1 bool
	}{result1}
}

func (fake *CIDRPool) IsMemberReturnsOnCall(i int, result1 bool) {
	fake.IsMemberStub = nil
	if fake.isMemberReturnsOnCall == nil {
		fake.isMemberReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isMemberReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *CIDRPool) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAvailableBlockMutex.RLock()
	defer fake.getAvailableBlockMutex.RUnlock()
	fake.getAvailableSingleIPMutex.RLock()
	defer fake.getAvailableSingleIPMutex.RUnlock()
	fake.isMemberMutex.RLock()
	defer fake.isMemberMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CIDRPool) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
