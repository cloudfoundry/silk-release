// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"
)

type HardwareAddressGenerator struct {
	GenerateForVTEPStub        func(containerIP net.IP) (net.HardwareAddr, error)
	generateForVTEPMutex       sync.RWMutex
	generateForVTEPArgsForCall []struct {
		containerIP net.IP
	}
	generateForVTEPReturns struct {
		result1 net.HardwareAddr
		result2 error
	}
	generateForVTEPReturnsOnCall map[int]struct {
		result1 net.HardwareAddr
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HardwareAddressGenerator) GenerateForVTEP(containerIP net.IP) (net.HardwareAddr, error) {
	fake.generateForVTEPMutex.Lock()
	ret, specificReturn := fake.generateForVTEPReturnsOnCall[len(fake.generateForVTEPArgsForCall)]
	fake.generateForVTEPArgsForCall = append(fake.generateForVTEPArgsForCall, struct {
		containerIP net.IP
	}{containerIP})
	fake.recordInvocation("GenerateForVTEP", []interface{}{containerIP})
	fake.generateForVTEPMutex.Unlock()
	if fake.GenerateForVTEPStub != nil {
		return fake.GenerateForVTEPStub(containerIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateForVTEPReturns.result1, fake.generateForVTEPReturns.result2
}

func (fake *HardwareAddressGenerator) GenerateForVTEPCallCount() int {
	fake.generateForVTEPMutex.RLock()
	defer fake.generateForVTEPMutex.RUnlock()
	return len(fake.generateForVTEPArgsForCall)
}

func (fake *HardwareAddressGenerator) GenerateForVTEPArgsForCall(i int) net.IP {
	fake.generateForVTEPMutex.RLock()
	defer fake.generateForVTEPMutex.RUnlock()
	return fake.generateForVTEPArgsForCall[i].containerIP
}

func (fake *HardwareAddressGenerator) GenerateForVTEPReturns(result1 net.HardwareAddr, result2 error) {
	fake.GenerateForVTEPStub = nil
	fake.generateForVTEPReturns = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HardwareAddressGenerator) GenerateForVTEPReturnsOnCall(i int, result1 net.HardwareAddr, result2 error) {
	fake.GenerateForVTEPStub = nil
	if fake.generateForVTEPReturnsOnCall == nil {
		fake.generateForVTEPReturnsOnCall = make(map[int]struct {
			result1 net.HardwareAddr
			result2 error
		})
	}
	fake.generateForVTEPReturnsOnCall[i] = struct {
		result1 net.HardwareAddr
		result2 error
	}{result1, result2}
}

func (fake *HardwareAddressGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateForVTEPMutex.RLock()
	defer fake.generateForVTEPMutex.RUnlock()
	return fake.invocations
}

func (fake *HardwareAddressGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
