// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"sync"

	lager "code.cloudfoundry.org/lager/v3"
)

type ErrorResponse struct {
	BadRequestStub        func(lager.Logger, http.ResponseWriter, error, string)
	badRequestMutex       sync.RWMutex
	badRequestArgsForCall []struct {
		arg1 lager.Logger
		arg2 http.ResponseWriter
		arg3 error
		arg4 string
	}
	ConflictStub        func(lager.Logger, http.ResponseWriter, error, string)
	conflictMutex       sync.RWMutex
	conflictArgsForCall []struct {
		arg1 lager.Logger
		arg2 http.ResponseWriter
		arg3 error
		arg4 string
	}
	InternalServerErrorStub        func(lager.Logger, http.ResponseWriter, error, string)
	internalServerErrorMutex       sync.RWMutex
	internalServerErrorArgsForCall []struct {
		arg1 lager.Logger
		arg2 http.ResponseWriter
		arg3 error
		arg4 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ErrorResponse) BadRequest(arg1 lager.Logger, arg2 http.ResponseWriter, arg3 error, arg4 string) {
	fake.badRequestMutex.Lock()
	fake.badRequestArgsForCall = append(fake.badRequestArgsForCall, struct {
		arg1 lager.Logger
		arg2 http.ResponseWriter
		arg3 error
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.BadRequestStub
	fake.recordInvocation("BadRequest", []interface{}{arg1, arg2, arg3, arg4})
	fake.badRequestMutex.Unlock()
	if stub != nil {
		fake.BadRequestStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *ErrorResponse) BadRequestCallCount() int {
	fake.badRequestMutex.RLock()
	defer fake.badRequestMutex.RUnlock()
	return len(fake.badRequestArgsForCall)
}

func (fake *ErrorResponse) BadRequestCalls(stub func(lager.Logger, http.ResponseWriter, error, string)) {
	fake.badRequestMutex.Lock()
	defer fake.badRequestMutex.Unlock()
	fake.BadRequestStub = stub
}

func (fake *ErrorResponse) BadRequestArgsForCall(i int) (lager.Logger, http.ResponseWriter, error, string) {
	fake.badRequestMutex.RLock()
	defer fake.badRequestMutex.RUnlock()
	argsForCall := fake.badRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ErrorResponse) Conflict(arg1 lager.Logger, arg2 http.ResponseWriter, arg3 error, arg4 string) {
	fake.conflictMutex.Lock()
	fake.conflictArgsForCall = append(fake.conflictArgsForCall, struct {
		arg1 lager.Logger
		arg2 http.ResponseWriter
		arg3 error
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ConflictStub
	fake.recordInvocation("Conflict", []interface{}{arg1, arg2, arg3, arg4})
	fake.conflictMutex.Unlock()
	if stub != nil {
		fake.ConflictStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *ErrorResponse) ConflictCallCount() int {
	fake.conflictMutex.RLock()
	defer fake.conflictMutex.RUnlock()
	return len(fake.conflictArgsForCall)
}

func (fake *ErrorResponse) ConflictCalls(stub func(lager.Logger, http.ResponseWriter, error, string)) {
	fake.conflictMutex.Lock()
	defer fake.conflictMutex.Unlock()
	fake.ConflictStub = stub
}

func (fake *ErrorResponse) ConflictArgsForCall(i int) (lager.Logger, http.ResponseWriter, error, string) {
	fake.conflictMutex.RLock()
	defer fake.conflictMutex.RUnlock()
	argsForCall := fake.conflictArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ErrorResponse) InternalServerError(arg1 lager.Logger, arg2 http.ResponseWriter, arg3 error, arg4 string) {
	fake.internalServerErrorMutex.Lock()
	fake.internalServerErrorArgsForCall = append(fake.internalServerErrorArgsForCall, struct {
		arg1 lager.Logger
		arg2 http.ResponseWriter
		arg3 error
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.InternalServerErrorStub
	fake.recordInvocation("InternalServerError", []interface{}{arg1, arg2, arg3, arg4})
	fake.internalServerErrorMutex.Unlock()
	if stub != nil {
		fake.InternalServerErrorStub(arg1, arg2, arg3, arg4)
	}
}

func (fake *ErrorResponse) InternalServerErrorCallCount() int {
	fake.internalServerErrorMutex.RLock()
	defer fake.internalServerErrorMutex.RUnlock()
	return len(fake.internalServerErrorArgsForCall)
}

func (fake *ErrorResponse) InternalServerErrorCalls(stub func(lager.Logger, http.ResponseWriter, error, string)) {
	fake.internalServerErrorMutex.Lock()
	defer fake.internalServerErrorMutex.Unlock()
	fake.InternalServerErrorStub = stub
}

func (fake *ErrorResponse) InternalServerErrorArgsForCall(i int) (lager.Logger, http.ResponseWriter, error, string) {
	fake.internalServerErrorMutex.RLock()
	defer fake.internalServerErrorMutex.RUnlock()
	argsForCall := fake.internalServerErrorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ErrorResponse) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.badRequestMutex.RLock()
	defer fake.badRequestMutex.RUnlock()
	fake.conflictMutex.RLock()
	defer fake.conflictMutex.RUnlock()
	fake.internalServerErrorMutex.RLock()
	defer fake.internalServerErrorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ErrorResponse) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
