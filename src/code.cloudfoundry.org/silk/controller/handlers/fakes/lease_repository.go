// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/controller"
)

type LeaseRepository struct {
	RoutableLeasesStub        func() ([]controller.Lease, error)
	routableLeasesMutex       sync.RWMutex
	routableLeasesArgsForCall []struct{}
	routableLeasesReturns     struct {
		result1 []controller.Lease
		result2 error
	}
	routableLeasesReturnsOnCall map[int]struct {
		result1 []controller.Lease
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LeaseRepository) RoutableLeases() ([]controller.Lease, error) {
	fake.routableLeasesMutex.Lock()
	ret, specificReturn := fake.routableLeasesReturnsOnCall[len(fake.routableLeasesArgsForCall)]
	fake.routableLeasesArgsForCall = append(fake.routableLeasesArgsForCall, struct{}{})
	fake.recordInvocation("RoutableLeases", []interface{}{})
	fake.routableLeasesMutex.Unlock()
	if fake.RoutableLeasesStub != nil {
		return fake.RoutableLeasesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.routableLeasesReturns.result1, fake.routableLeasesReturns.result2
}

func (fake *LeaseRepository) RoutableLeasesCallCount() int {
	fake.routableLeasesMutex.RLock()
	defer fake.routableLeasesMutex.RUnlock()
	return len(fake.routableLeasesArgsForCall)
}

func (fake *LeaseRepository) RoutableLeasesReturns(result1 []controller.Lease, result2 error) {
	fake.RoutableLeasesStub = nil
	fake.routableLeasesReturns = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *LeaseRepository) RoutableLeasesReturnsOnCall(i int, result1 []controller.Lease, result2 error) {
	fake.RoutableLeasesStub = nil
	if fake.routableLeasesReturnsOnCall == nil {
		fake.routableLeasesReturnsOnCall = make(map[int]struct {
			result1 []controller.Lease
			result2 error
		})
	}
	fake.routableLeasesReturnsOnCall[i] = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *LeaseRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.routableLeasesMutex.RLock()
	defer fake.routableLeasesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LeaseRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
