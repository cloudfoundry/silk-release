// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/controller"
)

type LeaseAcquirer struct {
	AcquireSubnetLeaseStub        func(underlayIP string, singleOverlayIP bool) (*controller.Lease, error)
	acquireSubnetLeaseMutex       sync.RWMutex
	acquireSubnetLeaseArgsForCall []struct {
		underlayIP      string
		singleOverlayIP bool
	}
	acquireSubnetLeaseReturns struct {
		result1 *controller.Lease
		result2 error
	}
	acquireSubnetLeaseReturnsOnCall map[int]struct {
		result1 *controller.Lease
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LeaseAcquirer) AcquireSubnetLease(underlayIP string, singleOverlayIP bool) (*controller.Lease, error) {
	fake.acquireSubnetLeaseMutex.Lock()
	ret, specificReturn := fake.acquireSubnetLeaseReturnsOnCall[len(fake.acquireSubnetLeaseArgsForCall)]
	fake.acquireSubnetLeaseArgsForCall = append(fake.acquireSubnetLeaseArgsForCall, struct {
		underlayIP      string
		singleOverlayIP bool
	}{underlayIP, singleOverlayIP})
	fake.recordInvocation("AcquireSubnetLease", []interface{}{underlayIP, singleOverlayIP})
	fake.acquireSubnetLeaseMutex.Unlock()
	if fake.AcquireSubnetLeaseStub != nil {
		return fake.AcquireSubnetLeaseStub(underlayIP, singleOverlayIP)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.acquireSubnetLeaseReturns.result1, fake.acquireSubnetLeaseReturns.result2
}

func (fake *LeaseAcquirer) AcquireSubnetLeaseCallCount() int {
	fake.acquireSubnetLeaseMutex.RLock()
	defer fake.acquireSubnetLeaseMutex.RUnlock()
	return len(fake.acquireSubnetLeaseArgsForCall)
}

func (fake *LeaseAcquirer) AcquireSubnetLeaseArgsForCall(i int) (string, bool) {
	fake.acquireSubnetLeaseMutex.RLock()
	defer fake.acquireSubnetLeaseMutex.RUnlock()
	return fake.acquireSubnetLeaseArgsForCall[i].underlayIP, fake.acquireSubnetLeaseArgsForCall[i].singleOverlayIP
}

func (fake *LeaseAcquirer) AcquireSubnetLeaseReturns(result1 *controller.Lease, result2 error) {
	fake.AcquireSubnetLeaseStub = nil
	fake.acquireSubnetLeaseReturns = struct {
		result1 *controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *LeaseAcquirer) AcquireSubnetLeaseReturnsOnCall(i int, result1 *controller.Lease, result2 error) {
	fake.AcquireSubnetLeaseStub = nil
	if fake.acquireSubnetLeaseReturnsOnCall == nil {
		fake.acquireSubnetLeaseReturnsOnCall = make(map[int]struct {
			result1 *controller.Lease
			result2 error
		})
	}
	fake.acquireSubnetLeaseReturnsOnCall[i] = struct {
		result1 *controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *LeaseAcquirer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.acquireSubnetLeaseMutex.RLock()
	defer fake.acquireSubnetLeaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LeaseAcquirer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
