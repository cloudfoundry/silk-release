// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type LeaseReleaser struct {
	ReleaseSubnetLeaseStub        func(underlayIP string) error
	releaseSubnetLeaseMutex       sync.RWMutex
	releaseSubnetLeaseArgsForCall []struct {
		underlayIP string
	}
	releaseSubnetLeaseReturns struct {
		result1 error
	}
	releaseSubnetLeaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LeaseReleaser) ReleaseSubnetLease(underlayIP string) error {
	fake.releaseSubnetLeaseMutex.Lock()
	ret, specificReturn := fake.releaseSubnetLeaseReturnsOnCall[len(fake.releaseSubnetLeaseArgsForCall)]
	fake.releaseSubnetLeaseArgsForCall = append(fake.releaseSubnetLeaseArgsForCall, struct {
		underlayIP string
	}{underlayIP})
	fake.recordInvocation("ReleaseSubnetLease", []interface{}{underlayIP})
	fake.releaseSubnetLeaseMutex.Unlock()
	if fake.ReleaseSubnetLeaseStub != nil {
		return fake.ReleaseSubnetLeaseStub(underlayIP)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.releaseSubnetLeaseReturns.result1
}

func (fake *LeaseReleaser) ReleaseSubnetLeaseCallCount() int {
	fake.releaseSubnetLeaseMutex.RLock()
	defer fake.releaseSubnetLeaseMutex.RUnlock()
	return len(fake.releaseSubnetLeaseArgsForCall)
}

func (fake *LeaseReleaser) ReleaseSubnetLeaseArgsForCall(i int) string {
	fake.releaseSubnetLeaseMutex.RLock()
	defer fake.releaseSubnetLeaseMutex.RUnlock()
	return fake.releaseSubnetLeaseArgsForCall[i].underlayIP
}

func (fake *LeaseReleaser) ReleaseSubnetLeaseReturns(result1 error) {
	fake.ReleaseSubnetLeaseStub = nil
	fake.releaseSubnetLeaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *LeaseReleaser) ReleaseSubnetLeaseReturnsOnCall(i int, result1 error) {
	fake.ReleaseSubnetLeaseStub = nil
	if fake.releaseSubnetLeaseReturnsOnCall == nil {
		fake.releaseSubnetLeaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.releaseSubnetLeaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *LeaseReleaser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseSubnetLeaseMutex.RLock()
	defer fake.releaseSubnetLeaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LeaseReleaser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
