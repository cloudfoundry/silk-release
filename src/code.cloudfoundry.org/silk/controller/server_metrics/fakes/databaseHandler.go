// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/controller"
)

type DatabaseHandler struct {
	AllStub        func() ([]controller.Lease, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct {
	}
	allReturns struct {
		result1 []controller.Lease
		result2 error
	}
	allReturnsOnCall map[int]struct {
		result1 []controller.Lease
		result2 error
	}
	AllActiveStub        func(int) ([]controller.Lease, error)
	allActiveMutex       sync.RWMutex
	allActiveArgsForCall []struct {
		arg1 int
	}
	allActiveReturns struct {
		result1 []controller.Lease
		result2 error
	}
	allActiveReturnsOnCall map[int]struct {
		result1 []controller.Lease
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DatabaseHandler) All() ([]controller.Lease, error) {
	fake.allMutex.Lock()
	ret, specificReturn := fake.allReturnsOnCall[len(fake.allArgsForCall)]
	fake.allArgsForCall = append(fake.allArgsForCall, struct {
	}{})
	stub := fake.AllStub
	fakeReturns := fake.allReturns
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DatabaseHandler) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *DatabaseHandler) AllCalls(stub func() ([]controller.Lease, error)) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = stub
}

func (fake *DatabaseHandler) AllReturns(result1 []controller.Lease, result2 error) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) AllReturnsOnCall(i int, result1 []controller.Lease, result2 error) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	if fake.allReturnsOnCall == nil {
		fake.allReturnsOnCall = make(map[int]struct {
			result1 []controller.Lease
			result2 error
		})
	}
	fake.allReturnsOnCall[i] = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) AllActive(arg1 int) ([]controller.Lease, error) {
	fake.allActiveMutex.Lock()
	ret, specificReturn := fake.allActiveReturnsOnCall[len(fake.allActiveArgsForCall)]
	fake.allActiveArgsForCall = append(fake.allActiveArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.AllActiveStub
	fakeReturns := fake.allActiveReturns
	fake.recordInvocation("AllActive", []interface{}{arg1})
	fake.allActiveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DatabaseHandler) AllActiveCallCount() int {
	fake.allActiveMutex.RLock()
	defer fake.allActiveMutex.RUnlock()
	return len(fake.allActiveArgsForCall)
}

func (fake *DatabaseHandler) AllActiveCalls(stub func(int) ([]controller.Lease, error)) {
	fake.allActiveMutex.Lock()
	defer fake.allActiveMutex.Unlock()
	fake.AllActiveStub = stub
}

func (fake *DatabaseHandler) AllActiveArgsForCall(i int) int {
	fake.allActiveMutex.RLock()
	defer fake.allActiveMutex.RUnlock()
	argsForCall := fake.allActiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *DatabaseHandler) AllActiveReturns(result1 []controller.Lease, result2 error) {
	fake.allActiveMutex.Lock()
	defer fake.allActiveMutex.Unlock()
	fake.AllActiveStub = nil
	fake.allActiveReturns = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) AllActiveReturnsOnCall(i int, result1 []controller.Lease, result2 error) {
	fake.allActiveMutex.Lock()
	defer fake.allActiveMutex.Unlock()
	fake.AllActiveStub = nil
	if fake.allActiveReturnsOnCall == nil {
		fake.allActiveReturnsOnCall = make(map[int]struct {
			result1 []controller.Lease
			result2 error
		})
	}
	fake.allActiveReturnsOnCall[i] = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *DatabaseHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.allActiveMutex.RLock()
	defer fake.allActiveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DatabaseHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
