// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net"
	"sync"
)

type NetAdapter struct {
	InterfacesStub        func() ([]net.Interface, error)
	interfacesMutex       sync.RWMutex
	interfacesArgsForCall []struct{}
	interfacesReturns     struct {
		result1 []net.Interface
		result2 error
	}
	interfacesReturnsOnCall map[int]struct {
		result1 []net.Interface
		result2 error
	}
	InterfaceAddrsStub        func(net.Interface) ([]net.Addr, error)
	interfaceAddrsMutex       sync.RWMutex
	interfaceAddrsArgsForCall []struct {
		arg1 net.Interface
	}
	interfaceAddrsReturns struct {
		result1 []net.Addr
		result2 error
	}
	interfaceAddrsReturnsOnCall map[int]struct {
		result1 []net.Addr
		result2 error
	}
	InterfaceByNameStub        func(name string) (*net.Interface, error)
	interfaceByNameMutex       sync.RWMutex
	interfaceByNameArgsForCall []struct {
		name string
	}
	interfaceByNameReturns struct {
		result1 *net.Interface
		result2 error
	}
	interfaceByNameReturnsOnCall map[int]struct {
		result1 *net.Interface
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetAdapter) Interfaces() ([]net.Interface, error) {
	fake.interfacesMutex.Lock()
	ret, specificReturn := fake.interfacesReturnsOnCall[len(fake.interfacesArgsForCall)]
	fake.interfacesArgsForCall = append(fake.interfacesArgsForCall, struct{}{})
	fake.recordInvocation("Interfaces", []interface{}{})
	fake.interfacesMutex.Unlock()
	if fake.InterfacesStub != nil {
		return fake.InterfacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.interfacesReturns.result1, fake.interfacesReturns.result2
}

func (fake *NetAdapter) InterfacesCallCount() int {
	fake.interfacesMutex.RLock()
	defer fake.interfacesMutex.RUnlock()
	return len(fake.interfacesArgsForCall)
}

func (fake *NetAdapter) InterfacesReturns(result1 []net.Interface, result2 error) {
	fake.InterfacesStub = nil
	fake.interfacesReturns = struct {
		result1 []net.Interface
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) InterfacesReturnsOnCall(i int, result1 []net.Interface, result2 error) {
	fake.InterfacesStub = nil
	if fake.interfacesReturnsOnCall == nil {
		fake.interfacesReturnsOnCall = make(map[int]struct {
			result1 []net.Interface
			result2 error
		})
	}
	fake.interfacesReturnsOnCall[i] = struct {
		result1 []net.Interface
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) InterfaceAddrs(arg1 net.Interface) ([]net.Addr, error) {
	fake.interfaceAddrsMutex.Lock()
	ret, specificReturn := fake.interfaceAddrsReturnsOnCall[len(fake.interfaceAddrsArgsForCall)]
	fake.interfaceAddrsArgsForCall = append(fake.interfaceAddrsArgsForCall, struct {
		arg1 net.Interface
	}{arg1})
	fake.recordInvocation("InterfaceAddrs", []interface{}{arg1})
	fake.interfaceAddrsMutex.Unlock()
	if fake.InterfaceAddrsStub != nil {
		return fake.InterfaceAddrsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.interfaceAddrsReturns.result1, fake.interfaceAddrsReturns.result2
}

func (fake *NetAdapter) InterfaceAddrsCallCount() int {
	fake.interfaceAddrsMutex.RLock()
	defer fake.interfaceAddrsMutex.RUnlock()
	return len(fake.interfaceAddrsArgsForCall)
}

func (fake *NetAdapter) InterfaceAddrsArgsForCall(i int) net.Interface {
	fake.interfaceAddrsMutex.RLock()
	defer fake.interfaceAddrsMutex.RUnlock()
	return fake.interfaceAddrsArgsForCall[i].arg1
}

func (fake *NetAdapter) InterfaceAddrsReturns(result1 []net.Addr, result2 error) {
	fake.InterfaceAddrsStub = nil
	fake.interfaceAddrsReturns = struct {
		result1 []net.Addr
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) InterfaceAddrsReturnsOnCall(i int, result1 []net.Addr, result2 error) {
	fake.InterfaceAddrsStub = nil
	if fake.interfaceAddrsReturnsOnCall == nil {
		fake.interfaceAddrsReturnsOnCall = make(map[int]struct {
			result1 []net.Addr
			result2 error
		})
	}
	fake.interfaceAddrsReturnsOnCall[i] = struct {
		result1 []net.Addr
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) InterfaceByName(name string) (*net.Interface, error) {
	fake.interfaceByNameMutex.Lock()
	ret, specificReturn := fake.interfaceByNameReturnsOnCall[len(fake.interfaceByNameArgsForCall)]
	fake.interfaceByNameArgsForCall = append(fake.interfaceByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("InterfaceByName", []interface{}{name})
	fake.interfaceByNameMutex.Unlock()
	if fake.InterfaceByNameStub != nil {
		return fake.InterfaceByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.interfaceByNameReturns.result1, fake.interfaceByNameReturns.result2
}

func (fake *NetAdapter) InterfaceByNameCallCount() int {
	fake.interfaceByNameMutex.RLock()
	defer fake.interfaceByNameMutex.RUnlock()
	return len(fake.interfaceByNameArgsForCall)
}

func (fake *NetAdapter) InterfaceByNameArgsForCall(i int) string {
	fake.interfaceByNameMutex.RLock()
	defer fake.interfaceByNameMutex.RUnlock()
	return fake.interfaceByNameArgsForCall[i].name
}

func (fake *NetAdapter) InterfaceByNameReturns(result1 *net.Interface, result2 error) {
	fake.InterfaceByNameStub = nil
	fake.interfaceByNameReturns = struct {
		result1 *net.Interface
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) InterfaceByNameReturnsOnCall(i int, result1 *net.Interface, result2 error) {
	fake.InterfaceByNameStub = nil
	if fake.interfaceByNameReturnsOnCall == nil {
		fake.interfaceByNameReturnsOnCall = make(map[int]struct {
			result1 *net.Interface
			result2 error
		})
	}
	fake.interfaceByNameReturnsOnCall[i] = struct {
		result1 *net.Interface
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.interfacesMutex.RLock()
	defer fake.interfacesMutex.RUnlock()
	fake.interfaceAddrsMutex.RLock()
	defer fake.interfaceAddrsMutex.RUnlock()
	fake.interfaceByNameMutex.RLock()
	defer fake.interfaceByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NetAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
