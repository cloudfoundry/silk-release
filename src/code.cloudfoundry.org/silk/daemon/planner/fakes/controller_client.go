// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/controller"
)

type ControllerClient struct {
	GetActiveLeasesStub        func() ([]controller.Lease, error)
	getActiveLeasesMutex       sync.RWMutex
	getActiveLeasesArgsForCall []struct {
	}
	getActiveLeasesReturns struct {
		result1 []controller.Lease
		result2 error
	}
	getActiveLeasesReturnsOnCall map[int]struct {
		result1 []controller.Lease
		result2 error
	}
	RenewSubnetLeaseStub        func(controller.Lease) error
	renewSubnetLeaseMutex       sync.RWMutex
	renewSubnetLeaseArgsForCall []struct {
		arg1 controller.Lease
	}
	renewSubnetLeaseReturns struct {
		result1 error
	}
	renewSubnetLeaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ControllerClient) GetActiveLeases() ([]controller.Lease, error) {
	fake.getActiveLeasesMutex.Lock()
	ret, specificReturn := fake.getActiveLeasesReturnsOnCall[len(fake.getActiveLeasesArgsForCall)]
	fake.getActiveLeasesArgsForCall = append(fake.getActiveLeasesArgsForCall, struct {
	}{})
	stub := fake.GetActiveLeasesStub
	fakeReturns := fake.getActiveLeasesReturns
	fake.recordInvocation("GetActiveLeases", []interface{}{})
	fake.getActiveLeasesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ControllerClient) GetActiveLeasesCallCount() int {
	fake.getActiveLeasesMutex.RLock()
	defer fake.getActiveLeasesMutex.RUnlock()
	return len(fake.getActiveLeasesArgsForCall)
}

func (fake *ControllerClient) GetActiveLeasesCalls(stub func() ([]controller.Lease, error)) {
	fake.getActiveLeasesMutex.Lock()
	defer fake.getActiveLeasesMutex.Unlock()
	fake.GetActiveLeasesStub = stub
}

func (fake *ControllerClient) GetActiveLeasesReturns(result1 []controller.Lease, result2 error) {
	fake.getActiveLeasesMutex.Lock()
	defer fake.getActiveLeasesMutex.Unlock()
	fake.GetActiveLeasesStub = nil
	fake.getActiveLeasesReturns = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *ControllerClient) GetActiveLeasesReturnsOnCall(i int, result1 []controller.Lease, result2 error) {
	fake.getActiveLeasesMutex.Lock()
	defer fake.getActiveLeasesMutex.Unlock()
	fake.GetActiveLeasesStub = nil
	if fake.getActiveLeasesReturnsOnCall == nil {
		fake.getActiveLeasesReturnsOnCall = make(map[int]struct {
			result1 []controller.Lease
			result2 error
		})
	}
	fake.getActiveLeasesReturnsOnCall[i] = struct {
		result1 []controller.Lease
		result2 error
	}{result1, result2}
}

func (fake *ControllerClient) RenewSubnetLease(arg1 controller.Lease) error {
	fake.renewSubnetLeaseMutex.Lock()
	ret, specificReturn := fake.renewSubnetLeaseReturnsOnCall[len(fake.renewSubnetLeaseArgsForCall)]
	fake.renewSubnetLeaseArgsForCall = append(fake.renewSubnetLeaseArgsForCall, struct {
		arg1 controller.Lease
	}{arg1})
	stub := fake.RenewSubnetLeaseStub
	fakeReturns := fake.renewSubnetLeaseReturns
	fake.recordInvocation("RenewSubnetLease", []interface{}{arg1})
	fake.renewSubnetLeaseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ControllerClient) RenewSubnetLeaseCallCount() int {
	fake.renewSubnetLeaseMutex.RLock()
	defer fake.renewSubnetLeaseMutex.RUnlock()
	return len(fake.renewSubnetLeaseArgsForCall)
}

func (fake *ControllerClient) RenewSubnetLeaseCalls(stub func(controller.Lease) error) {
	fake.renewSubnetLeaseMutex.Lock()
	defer fake.renewSubnetLeaseMutex.Unlock()
	fake.RenewSubnetLeaseStub = stub
}

func (fake *ControllerClient) RenewSubnetLeaseArgsForCall(i int) controller.Lease {
	fake.renewSubnetLeaseMutex.RLock()
	defer fake.renewSubnetLeaseMutex.RUnlock()
	argsForCall := fake.renewSubnetLeaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ControllerClient) RenewSubnetLeaseReturns(result1 error) {
	fake.renewSubnetLeaseMutex.Lock()
	defer fake.renewSubnetLeaseMutex.Unlock()
	fake.RenewSubnetLeaseStub = nil
	fake.renewSubnetLeaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *ControllerClient) RenewSubnetLeaseReturnsOnCall(i int, result1 error) {
	fake.renewSubnetLeaseMutex.Lock()
	defer fake.renewSubnetLeaseMutex.Unlock()
	fake.RenewSubnetLeaseStub = nil
	if fake.renewSubnetLeaseReturnsOnCall == nil {
		fake.renewSubnetLeaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renewSubnetLeaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ControllerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getActiveLeasesMutex.RLock()
	defer fake.getActiveLeasesMutex.RUnlock()
	fake.renewSubnetLeaseMutex.RLock()
	defer fake.renewSubnetLeaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ControllerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
