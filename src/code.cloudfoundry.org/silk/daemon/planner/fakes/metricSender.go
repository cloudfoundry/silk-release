// This file was generated by counterfeiter
package fakes

import (
	"sync"
)

type MetricSender struct {
	SendValueStub        func(name string, value float64, units string)
	sendValueMutex       sync.RWMutex
	sendValueArgsForCall []struct {
		name  string
		value float64
		units string
	}
	IncrementCounterStub        func(name string)
	incrementCounterMutex       sync.RWMutex
	incrementCounterArgsForCall []struct {
		name string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MetricSender) SendValue(name string, value float64, units string) {
	fake.sendValueMutex.Lock()
	fake.sendValueArgsForCall = append(fake.sendValueArgsForCall, struct {
		name  string
		value float64
		units string
	}{name, value, units})
	fake.recordInvocation("SendValue", []interface{}{name, value, units})
	fake.sendValueMutex.Unlock()
	if fake.SendValueStub != nil {
		fake.SendValueStub(name, value, units)
	}
}

func (fake *MetricSender) SendValueCallCount() int {
	fake.sendValueMutex.RLock()
	defer fake.sendValueMutex.RUnlock()
	return len(fake.sendValueArgsForCall)
}

func (fake *MetricSender) SendValueArgsForCall(i int) (string, float64, string) {
	fake.sendValueMutex.RLock()
	defer fake.sendValueMutex.RUnlock()
	return fake.sendValueArgsForCall[i].name, fake.sendValueArgsForCall[i].value, fake.sendValueArgsForCall[i].units
}

func (fake *MetricSender) IncrementCounter(name string) {
	fake.incrementCounterMutex.Lock()
	fake.incrementCounterArgsForCall = append(fake.incrementCounterArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("IncrementCounter", []interface{}{name})
	fake.incrementCounterMutex.Unlock()
	if fake.IncrementCounterStub != nil {
		fake.IncrementCounterStub(name)
	}
}

func (fake *MetricSender) IncrementCounterCallCount() int {
	fake.incrementCounterMutex.RLock()
	defer fake.incrementCounterMutex.RUnlock()
	return len(fake.incrementCounterArgsForCall)
}

func (fake *MetricSender) IncrementCounterArgsForCall(i int) string {
	fake.incrementCounterMutex.RLock()
	defer fake.incrementCounterMutex.RUnlock()
	return fake.incrementCounterArgsForCall[i].name
}

func (fake *MetricSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendValueMutex.RLock()
	defer fake.sendValueMutex.RUnlock()
	fake.incrementCounterMutex.RLock()
	defer fake.incrementCounterMutex.RUnlock()
	return fake.invocations
}

func (fake *MetricSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
