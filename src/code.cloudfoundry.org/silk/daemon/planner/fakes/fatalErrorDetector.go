// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/daemon/planner"
)

type FatalErrorDetector struct {
	GotSuccessStub        func()
	gotSuccessMutex       sync.RWMutex
	gotSuccessArgsForCall []struct {
	}
	IsFatalStub        func(error) bool
	isFatalMutex       sync.RWMutex
	isFatalArgsForCall []struct {
		arg1 error
	}
	isFatalReturns struct {
		result1 bool
	}
	isFatalReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FatalErrorDetector) GotSuccess() {
	fake.gotSuccessMutex.Lock()
	fake.gotSuccessArgsForCall = append(fake.gotSuccessArgsForCall, struct {
	}{})
	stub := fake.GotSuccessStub
	fake.recordInvocation("GotSuccess", []interface{}{})
	fake.gotSuccessMutex.Unlock()
	if stub != nil {
		fake.GotSuccessStub()
	}
}

func (fake *FatalErrorDetector) GotSuccessCallCount() int {
	fake.gotSuccessMutex.RLock()
	defer fake.gotSuccessMutex.RUnlock()
	return len(fake.gotSuccessArgsForCall)
}

func (fake *FatalErrorDetector) GotSuccessCalls(stub func()) {
	fake.gotSuccessMutex.Lock()
	defer fake.gotSuccessMutex.Unlock()
	fake.GotSuccessStub = stub
}

func (fake *FatalErrorDetector) IsFatal(arg1 error) bool {
	fake.isFatalMutex.Lock()
	ret, specificReturn := fake.isFatalReturnsOnCall[len(fake.isFatalArgsForCall)]
	fake.isFatalArgsForCall = append(fake.isFatalArgsForCall, struct {
		arg1 error
	}{arg1})
	stub := fake.IsFatalStub
	fakeReturns := fake.isFatalReturns
	fake.recordInvocation("IsFatal", []interface{}{arg1})
	fake.isFatalMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FatalErrorDetector) IsFatalCallCount() int {
	fake.isFatalMutex.RLock()
	defer fake.isFatalMutex.RUnlock()
	return len(fake.isFatalArgsForCall)
}

func (fake *FatalErrorDetector) IsFatalCalls(stub func(error) bool) {
	fake.isFatalMutex.Lock()
	defer fake.isFatalMutex.Unlock()
	fake.IsFatalStub = stub
}

func (fake *FatalErrorDetector) IsFatalArgsForCall(i int) error {
	fake.isFatalMutex.RLock()
	defer fake.isFatalMutex.RUnlock()
	argsForCall := fake.isFatalArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FatalErrorDetector) IsFatalReturns(result1 bool) {
	fake.isFatalMutex.Lock()
	defer fake.isFatalMutex.Unlock()
	fake.IsFatalStub = nil
	fake.isFatalReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FatalErrorDetector) IsFatalReturnsOnCall(i int, result1 bool) {
	fake.isFatalMutex.Lock()
	defer fake.isFatalMutex.Unlock()
	fake.IsFatalStub = nil
	if fake.isFatalReturnsOnCall == nil {
		fake.isFatalReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isFatalReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FatalErrorDetector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gotSuccessMutex.RLock()
	defer fake.gotSuccessMutex.RUnlock()
	fake.isFatalMutex.RLock()
	defer fake.isFatalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FatalErrorDetector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ planner.FatalErrorDetector = new(FatalErrorDetector)
