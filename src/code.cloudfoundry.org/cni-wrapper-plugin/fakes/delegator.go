// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/cni-wrapper-plugin/lib"
	"github.com/containernetworking/cni/pkg/types"
)

type Delegator struct {
	DelegateAddStub        func(string, []byte) (types.Result, error)
	delegateAddMutex       sync.RWMutex
	delegateAddArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	delegateAddReturns struct {
		result1 types.Result
		result2 error
	}
	delegateAddReturnsOnCall map[int]struct {
		result1 types.Result
		result2 error
	}
	DelegateDelStub        func(string, []byte) error
	delegateDelMutex       sync.RWMutex
	delegateDelArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	delegateDelReturns struct {
		result1 error
	}
	delegateDelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Delegator) DelegateAdd(arg1 string, arg2 []byte) (types.Result, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.delegateAddMutex.Lock()
	ret, specificReturn := fake.delegateAddReturnsOnCall[len(fake.delegateAddArgsForCall)]
	fake.delegateAddArgsForCall = append(fake.delegateAddArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.DelegateAddStub
	fakeReturns := fake.delegateAddReturns
	fake.recordInvocation("DelegateAdd", []interface{}{arg1, arg2Copy})
	fake.delegateAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Delegator) DelegateAddCallCount() int {
	fake.delegateAddMutex.RLock()
	defer fake.delegateAddMutex.RUnlock()
	return len(fake.delegateAddArgsForCall)
}

func (fake *Delegator) DelegateAddCalls(stub func(string, []byte) (types.Result, error)) {
	fake.delegateAddMutex.Lock()
	defer fake.delegateAddMutex.Unlock()
	fake.DelegateAddStub = stub
}

func (fake *Delegator) DelegateAddArgsForCall(i int) (string, []byte) {
	fake.delegateAddMutex.RLock()
	defer fake.delegateAddMutex.RUnlock()
	argsForCall := fake.delegateAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Delegator) DelegateAddReturns(result1 types.Result, result2 error) {
	fake.delegateAddMutex.Lock()
	defer fake.delegateAddMutex.Unlock()
	fake.DelegateAddStub = nil
	fake.delegateAddReturns = struct {
		result1 types.Result
		result2 error
	}{result1, result2}
}

func (fake *Delegator) DelegateAddReturnsOnCall(i int, result1 types.Result, result2 error) {
	fake.delegateAddMutex.Lock()
	defer fake.delegateAddMutex.Unlock()
	fake.DelegateAddStub = nil
	if fake.delegateAddReturnsOnCall == nil {
		fake.delegateAddReturnsOnCall = make(map[int]struct {
			result1 types.Result
			result2 error
		})
	}
	fake.delegateAddReturnsOnCall[i] = struct {
		result1 types.Result
		result2 error
	}{result1, result2}
}

func (fake *Delegator) DelegateDel(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.delegateDelMutex.Lock()
	ret, specificReturn := fake.delegateDelReturnsOnCall[len(fake.delegateDelArgsForCall)]
	fake.delegateDelArgsForCall = append(fake.delegateDelArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.DelegateDelStub
	fakeReturns := fake.delegateDelReturns
	fake.recordInvocation("DelegateDel", []interface{}{arg1, arg2Copy})
	fake.delegateDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Delegator) DelegateDelCallCount() int {
	fake.delegateDelMutex.RLock()
	defer fake.delegateDelMutex.RUnlock()
	return len(fake.delegateDelArgsForCall)
}

func (fake *Delegator) DelegateDelCalls(stub func(string, []byte) error) {
	fake.delegateDelMutex.Lock()
	defer fake.delegateDelMutex.Unlock()
	fake.DelegateDelStub = stub
}

func (fake *Delegator) DelegateDelArgsForCall(i int) (string, []byte) {
	fake.delegateDelMutex.RLock()
	defer fake.delegateDelMutex.RUnlock()
	argsForCall := fake.delegateDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Delegator) DelegateDelReturns(result1 error) {
	fake.delegateDelMutex.Lock()
	defer fake.delegateDelMutex.Unlock()
	fake.DelegateDelStub = nil
	fake.delegateDelReturns = struct {
		result1 error
	}{result1}
}

func (fake *Delegator) DelegateDelReturnsOnCall(i int, result1 error) {
	fake.delegateDelMutex.Lock()
	defer fake.delegateDelMutex.Unlock()
	fake.DelegateDelStub = nil
	if fake.delegateDelReturnsOnCall == nil {
		fake.delegateDelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.delegateDelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Delegator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.delegateAddMutex.RLock()
	defer fake.delegateAddMutex.RUnlock()
	fake.delegateDelMutex.RLock()
	defer fake.delegateDelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Delegator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lib.Delegator = new(Delegator)
