// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vishvananda/netlink"
)

type NetlinkLink struct {
	AttrsStub        func() *netlink.LinkAttrs
	attrsMutex       sync.RWMutex
	attrsArgsForCall []struct{}
	attrsReturns     struct {
		result1 *netlink.LinkAttrs
	}
	attrsReturnsOnCall map[int]struct {
		result1 *netlink.LinkAttrs
	}
	TypeStub        func() string
	typeMutex       sync.RWMutex
	typeArgsForCall []struct{}
	typeReturns     struct {
		result1 string
	}
	typeReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetlinkLink) Attrs() *netlink.LinkAttrs {
	fake.attrsMutex.Lock()
	ret, specificReturn := fake.attrsReturnsOnCall[len(fake.attrsArgsForCall)]
	fake.attrsArgsForCall = append(fake.attrsArgsForCall, struct{}{})
	fake.recordInvocation("Attrs", []interface{}{})
	fake.attrsMutex.Unlock()
	if fake.AttrsStub != nil {
		return fake.AttrsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.attrsReturns.result1
}

func (fake *NetlinkLink) AttrsCallCount() int {
	fake.attrsMutex.RLock()
	defer fake.attrsMutex.RUnlock()
	return len(fake.attrsArgsForCall)
}

func (fake *NetlinkLink) AttrsReturns(result1 *netlink.LinkAttrs) {
	fake.AttrsStub = nil
	fake.attrsReturns = struct {
		result1 *netlink.LinkAttrs
	}{result1}
}

func (fake *NetlinkLink) AttrsReturnsOnCall(i int, result1 *netlink.LinkAttrs) {
	fake.AttrsStub = nil
	if fake.attrsReturnsOnCall == nil {
		fake.attrsReturnsOnCall = make(map[int]struct {
			result1 *netlink.LinkAttrs
		})
	}
	fake.attrsReturnsOnCall[i] = struct {
		result1 *netlink.LinkAttrs
	}{result1}
}

func (fake *NetlinkLink) Type() string {
	fake.typeMutex.Lock()
	ret, specificReturn := fake.typeReturnsOnCall[len(fake.typeArgsForCall)]
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct{}{})
	fake.recordInvocation("Type", []interface{}{})
	fake.typeMutex.Unlock()
	if fake.TypeStub != nil {
		return fake.TypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.typeReturns.result1
}

func (fake *NetlinkLink) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *NetlinkLink) TypeReturns(result1 string) {
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 string
	}{result1}
}

func (fake *NetlinkLink) TypeReturnsOnCall(i int, result1 string) {
	fake.TypeStub = nil
	if fake.typeReturnsOnCall == nil {
		fake.typeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.typeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *NetlinkLink) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attrsMutex.RLock()
	defer fake.attrsMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NetlinkLink) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
