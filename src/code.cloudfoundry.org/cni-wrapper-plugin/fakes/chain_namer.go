// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type ChainNamer struct {
	PostfixStub        func(string, string) (string, error)
	postfixMutex       sync.RWMutex
	postfixArgsForCall []struct {
		arg1 string
		arg2 string
	}
	postfixReturns struct {
		result1 string
		result2 error
	}
	postfixReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PrefixStub        func(string, string) string
	prefixMutex       sync.RWMutex
	prefixArgsForCall []struct {
		arg1 string
		arg2 string
	}
	prefixReturns struct {
		result1 string
	}
	prefixReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChainNamer) Postfix(arg1 string, arg2 string) (string, error) {
	fake.postfixMutex.Lock()
	ret, specificReturn := fake.postfixReturnsOnCall[len(fake.postfixArgsForCall)]
	fake.postfixArgsForCall = append(fake.postfixArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.PostfixStub
	fakeReturns := fake.postfixReturns
	fake.recordInvocation("Postfix", []interface{}{arg1, arg2})
	fake.postfixMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ChainNamer) PostfixCallCount() int {
	fake.postfixMutex.RLock()
	defer fake.postfixMutex.RUnlock()
	return len(fake.postfixArgsForCall)
}

func (fake *ChainNamer) PostfixCalls(stub func(string, string) (string, error)) {
	fake.postfixMutex.Lock()
	defer fake.postfixMutex.Unlock()
	fake.PostfixStub = stub
}

func (fake *ChainNamer) PostfixArgsForCall(i int) (string, string) {
	fake.postfixMutex.RLock()
	defer fake.postfixMutex.RUnlock()
	argsForCall := fake.postfixArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ChainNamer) PostfixReturns(result1 string, result2 error) {
	fake.postfixMutex.Lock()
	defer fake.postfixMutex.Unlock()
	fake.PostfixStub = nil
	fake.postfixReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ChainNamer) PostfixReturnsOnCall(i int, result1 string, result2 error) {
	fake.postfixMutex.Lock()
	defer fake.postfixMutex.Unlock()
	fake.PostfixStub = nil
	if fake.postfixReturnsOnCall == nil {
		fake.postfixReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.postfixReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ChainNamer) Prefix(arg1 string, arg2 string) string {
	fake.prefixMutex.Lock()
	ret, specificReturn := fake.prefixReturnsOnCall[len(fake.prefixArgsForCall)]
	fake.prefixArgsForCall = append(fake.prefixArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.PrefixStub
	fakeReturns := fake.prefixReturns
	fake.recordInvocation("Prefix", []interface{}{arg1, arg2})
	fake.prefixMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ChainNamer) PrefixCallCount() int {
	fake.prefixMutex.RLock()
	defer fake.prefixMutex.RUnlock()
	return len(fake.prefixArgsForCall)
}

func (fake *ChainNamer) PrefixCalls(stub func(string, string) string) {
	fake.prefixMutex.Lock()
	defer fake.prefixMutex.Unlock()
	fake.PrefixStub = stub
}

func (fake *ChainNamer) PrefixArgsForCall(i int) (string, string) {
	fake.prefixMutex.RLock()
	defer fake.prefixMutex.RUnlock()
	argsForCall := fake.prefixArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ChainNamer) PrefixReturns(result1 string) {
	fake.prefixMutex.Lock()
	defer fake.prefixMutex.Unlock()
	fake.PrefixStub = nil
	fake.prefixReturns = struct {
		result1 string
	}{result1}
}

func (fake *ChainNamer) PrefixReturnsOnCall(i int, result1 string) {
	fake.prefixMutex.Lock()
	defer fake.prefixMutex.Unlock()
	fake.PrefixStub = nil
	if fake.prefixReturnsOnCall == nil {
		fake.prefixReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.prefixReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ChainNamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.postfixMutex.RLock()
	defer fake.postfixMutex.RUnlock()
	fake.prefixMutex.RLock()
	defer fake.prefixMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ChainNamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
