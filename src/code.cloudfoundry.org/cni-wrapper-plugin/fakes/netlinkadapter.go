// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vishvananda/netlink"
)

type NetlinkAdapter struct {
	LinkListStub        func() ([]netlink.Link, error)
	linkListMutex       sync.RWMutex
	linkListArgsForCall []struct{}
	linkListReturns     struct {
		result1 []netlink.Link
		result2 error
	}
	linkListReturnsOnCall map[int]struct {
		result1 []netlink.Link
		result2 error
	}
	AddrListStub        func(link netlink.Link, family int) ([]netlink.Addr, error)
	addrListMutex       sync.RWMutex
	addrListArgsForCall []struct {
		link   netlink.Link
		family int
	}
	addrListReturns struct {
		result1 []netlink.Addr
		result2 error
	}
	addrListReturnsOnCall map[int]struct {
		result1 []netlink.Addr
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetlinkAdapter) LinkList() ([]netlink.Link, error) {
	fake.linkListMutex.Lock()
	ret, specificReturn := fake.linkListReturnsOnCall[len(fake.linkListArgsForCall)]
	fake.linkListArgsForCall = append(fake.linkListArgsForCall, struct{}{})
	fake.recordInvocation("LinkList", []interface{}{})
	fake.linkListMutex.Unlock()
	if fake.LinkListStub != nil {
		return fake.LinkListStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.linkListReturns.result1, fake.linkListReturns.result2
}

func (fake *NetlinkAdapter) LinkListCallCount() int {
	fake.linkListMutex.RLock()
	defer fake.linkListMutex.RUnlock()
	return len(fake.linkListArgsForCall)
}

func (fake *NetlinkAdapter) LinkListReturns(result1 []netlink.Link, result2 error) {
	fake.LinkListStub = nil
	fake.linkListReturns = struct {
		result1 []netlink.Link
		result2 error
	}{result1, result2}
}

func (fake *NetlinkAdapter) LinkListReturnsOnCall(i int, result1 []netlink.Link, result2 error) {
	fake.LinkListStub = nil
	if fake.linkListReturnsOnCall == nil {
		fake.linkListReturnsOnCall = make(map[int]struct {
			result1 []netlink.Link
			result2 error
		})
	}
	fake.linkListReturnsOnCall[i] = struct {
		result1 []netlink.Link
		result2 error
	}{result1, result2}
}

func (fake *NetlinkAdapter) AddrList(link netlink.Link, family int) ([]netlink.Addr, error) {
	fake.addrListMutex.Lock()
	ret, specificReturn := fake.addrListReturnsOnCall[len(fake.addrListArgsForCall)]
	fake.addrListArgsForCall = append(fake.addrListArgsForCall, struct {
		link   netlink.Link
		family int
	}{link, family})
	fake.recordInvocation("AddrList", []interface{}{link, family})
	fake.addrListMutex.Unlock()
	if fake.AddrListStub != nil {
		return fake.AddrListStub(link, family)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addrListReturns.result1, fake.addrListReturns.result2
}

func (fake *NetlinkAdapter) AddrListCallCount() int {
	fake.addrListMutex.RLock()
	defer fake.addrListMutex.RUnlock()
	return len(fake.addrListArgsForCall)
}

func (fake *NetlinkAdapter) AddrListArgsForCall(i int) (netlink.Link, int) {
	fake.addrListMutex.RLock()
	defer fake.addrListMutex.RUnlock()
	return fake.addrListArgsForCall[i].link, fake.addrListArgsForCall[i].family
}

func (fake *NetlinkAdapter) AddrListReturns(result1 []netlink.Addr, result2 error) {
	fake.AddrListStub = nil
	fake.addrListReturns = struct {
		result1 []netlink.Addr
		result2 error
	}{result1, result2}
}

func (fake *NetlinkAdapter) AddrListReturnsOnCall(i int, result1 []netlink.Addr, result2 error) {
	fake.AddrListStub = nil
	if fake.addrListReturnsOnCall == nil {
		fake.addrListReturnsOnCall = make(map[int]struct {
			result1 []netlink.Addr
			result2 error
		})
	}
	fake.addrListReturnsOnCall[i] = struct {
		result1 []netlink.Addr
		result2 error
	}{result1, result2}
}

func (fake *NetlinkAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.linkListMutex.RLock()
	defer fake.linkListMutex.RUnlock()
	fake.addrListMutex.RLock()
	defer fake.addrListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NetlinkAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
