// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/lib/rules"
)

type NetOutRuleConverter struct {
	BulkConvertStub        func([]garden.NetOutRule, string, bool) []rules.IPTablesRule
	bulkConvertMutex       sync.RWMutex
	bulkConvertArgsForCall []struct {
		arg1 []garden.NetOutRule
		arg2 string
		arg3 bool
	}
	bulkConvertReturns struct {
		result1 []rules.IPTablesRule
	}
	bulkConvertReturnsOnCall map[int]struct {
		result1 []rules.IPTablesRule
	}
	ConvertStub        func(garden.NetOutRule, string, bool) []rules.IPTablesRule
	convertMutex       sync.RWMutex
	convertArgsForCall []struct {
		arg1 garden.NetOutRule
		arg2 string
		arg3 bool
	}
	convertReturns struct {
		result1 []rules.IPTablesRule
	}
	convertReturnsOnCall map[int]struct {
		result1 []rules.IPTablesRule
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetOutRuleConverter) BulkConvert(arg1 []garden.NetOutRule, arg2 string, arg3 bool) []rules.IPTablesRule {
	var arg1Copy []garden.NetOutRule
	if arg1 != nil {
		arg1Copy = make([]garden.NetOutRule, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.bulkConvertMutex.Lock()
	ret, specificReturn := fake.bulkConvertReturnsOnCall[len(fake.bulkConvertArgsForCall)]
	fake.bulkConvertArgsForCall = append(fake.bulkConvertArgsForCall, struct {
		arg1 []garden.NetOutRule
		arg2 string
		arg3 bool
	}{arg1Copy, arg2, arg3})
	stub := fake.BulkConvertStub
	fakeReturns := fake.bulkConvertReturns
	fake.recordInvocation("BulkConvert", []interface{}{arg1Copy, arg2, arg3})
	fake.bulkConvertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *NetOutRuleConverter) BulkConvertCallCount() int {
	fake.bulkConvertMutex.RLock()
	defer fake.bulkConvertMutex.RUnlock()
	return len(fake.bulkConvertArgsForCall)
}

func (fake *NetOutRuleConverter) BulkConvertCalls(stub func([]garden.NetOutRule, string, bool) []rules.IPTablesRule) {
	fake.bulkConvertMutex.Lock()
	defer fake.bulkConvertMutex.Unlock()
	fake.BulkConvertStub = stub
}

func (fake *NetOutRuleConverter) BulkConvertArgsForCall(i int) ([]garden.NetOutRule, string, bool) {
	fake.bulkConvertMutex.RLock()
	defer fake.bulkConvertMutex.RUnlock()
	argsForCall := fake.bulkConvertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *NetOutRuleConverter) BulkConvertReturns(result1 []rules.IPTablesRule) {
	fake.bulkConvertMutex.Lock()
	defer fake.bulkConvertMutex.Unlock()
	fake.BulkConvertStub = nil
	fake.bulkConvertReturns = struct {
		result1 []rules.IPTablesRule
	}{result1}
}

func (fake *NetOutRuleConverter) BulkConvertReturnsOnCall(i int, result1 []rules.IPTablesRule) {
	fake.bulkConvertMutex.Lock()
	defer fake.bulkConvertMutex.Unlock()
	fake.BulkConvertStub = nil
	if fake.bulkConvertReturnsOnCall == nil {
		fake.bulkConvertReturnsOnCall = make(map[int]struct {
			result1 []rules.IPTablesRule
		})
	}
	fake.bulkConvertReturnsOnCall[i] = struct {
		result1 []rules.IPTablesRule
	}{result1}
}

func (fake *NetOutRuleConverter) Convert(arg1 garden.NetOutRule, arg2 string, arg3 bool) []rules.IPTablesRule {
	fake.convertMutex.Lock()
	ret, specificReturn := fake.convertReturnsOnCall[len(fake.convertArgsForCall)]
	fake.convertArgsForCall = append(fake.convertArgsForCall, struct {
		arg1 garden.NetOutRule
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.ConvertStub
	fakeReturns := fake.convertReturns
	fake.recordInvocation("Convert", []interface{}{arg1, arg2, arg3})
	fake.convertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *NetOutRuleConverter) ConvertCallCount() int {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return len(fake.convertArgsForCall)
}

func (fake *NetOutRuleConverter) ConvertCalls(stub func(garden.NetOutRule, string, bool) []rules.IPTablesRule) {
	fake.convertMutex.Lock()
	defer fake.convertMutex.Unlock()
	fake.ConvertStub = stub
}

func (fake *NetOutRuleConverter) ConvertArgsForCall(i int) (garden.NetOutRule, string, bool) {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	argsForCall := fake.convertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *NetOutRuleConverter) ConvertReturns(result1 []rules.IPTablesRule) {
	fake.convertMutex.Lock()
	defer fake.convertMutex.Unlock()
	fake.ConvertStub = nil
	fake.convertReturns = struct {
		result1 []rules.IPTablesRule
	}{result1}
}

func (fake *NetOutRuleConverter) ConvertReturnsOnCall(i int, result1 []rules.IPTablesRule) {
	fake.convertMutex.Lock()
	defer fake.convertMutex.Unlock()
	fake.ConvertStub = nil
	if fake.convertReturnsOnCall == nil {
		fake.convertReturnsOnCall = make(map[int]struct {
			result1 []rules.IPTablesRule
		})
	}
	fake.convertReturnsOnCall[i] = struct {
		result1 []rules.IPTablesRule
	}{result1}
}

func (fake *NetOutRuleConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bulkConvertMutex.RLock()
	defer fake.bulkConvertMutex.RUnlock()
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NetOutRuleConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
