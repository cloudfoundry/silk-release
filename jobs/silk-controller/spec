---
name: silk-controller

templates:
  bpm.yml.erb: config/bpm.yml
  post-start.erb: bin/post-start
  silk-controller.json.erb: config/silk-controller.json
  ca.crt.erb: config/certs/ca.crt
  server.crt.erb: config/certs/server.crt
  server.key.erb: config/certs/server.key
  dns_health_check.erb: bin/dns_health_check
  database_ca.crt.erb: config/certs/database_ca.crt

packages:
  - silk-controller
  - silk-ctl-utils

consumes:
- name: database
  type: database
  optional: true

provides:
- name: cf_network
  type: cf_network
  properties:
    - network
    - subnet_prefix_length

properties:
  network:
    description: "CIDR address block for overlay network.  Subnets for each diego cell are allocated out of this network."
    default: "10.255.0.0/16"

  subnet_prefix_length:
    description: "Length, in bits, of the prefix for subnets allocated per Diego cell, e.g. '24' for a '/24' subnet."
    default: 24

  subnet_lease_expiration_hours:
    description: "Expiration time for subnet leases, in hours.  If a cell is not gracefully stopped, its lease may be reclaimed after this duration.  Diego cells that are partitioned from the silk controller for longer than this duration will be removed from the network."
    default: 168

  debug_port:
    description: "Debug port for silk controller.  Use this to adjust log level at runtime or dump process stats."
    default: 46455

  health_check_port:
    description: "Health check port for silk controller. Used by the Bosh DNS health check."
    default: 19683

  health_check_timeout_seconds:
    description: "Health check timeout"
    default: 5

  listen_ip:
    description: "IP address where the silk controller will serve its API."
    default: 0.0.0.0

  listen_port:
    description: "Port where the silk controller will serve its API.   Silk daemon connects to this port."
    default: 4103

  ca_cert:
    description: "Trusted CA certificate that was used to sign the silk daemon client cert and key."

  server_cert:
    description: "Server certificate for TLS. Must have common name that matches the Bosh DNS name of the silk controller, eg silk-controller.service.cf.internal"

  server_key:
    description: "Server key for TLS."

  metron_port:
    description: "Forward metrics to this metron agent, listening on this port on localhost"
    default: 3457

  database.type:
    description: "Type of database: postgres or mysql"

  database.username:
    description: "Username for database connection."

  database.password:
    description: "Password for database connection."

  database.host:
    description: "Host (IP or DNS name) for database server."

  database.port:
    description: "Port for database server."

  database.name:
    description: "Name of logical database to use."

  database.require_ssl:
    description: "Require ssl db connectivity when true. Must be used in conjuncture with a release that is configured with ssl."
    default: false

  database.ca_cert:
    description: "ca cert for db connectivity. Requires 'database.require_ssl' to be true."
    default: ~

  database.skip_hostname_validation:
    description: "Skip hostname validation when true. Requires 'database.require_ssl' to be true"
    default: false

  database.connect_timeout_seconds:
    description: "Connection timeout between the silk controller and the silk database."
    default: 120

  max_open_connections:
    description: |
      Maximum number of open connections to the SQL database.

      The number of necessary connections will scale with the number of diego-cells in the deployment.
      The handlers that use the db conns in this job respond to the silk-daemon, which runs on the diego-cells.
      Each daemon polls this server once every 5s, by default.
      Anecdote: A deployment with ~200 diego-cells has been seen to use up to ~200 conns in total.
      Each instance of this job would expect approx 200/job-instance-count conns each in this scenario.
      YMMV based on the performance of the db, latency, load, etc.
    default: 200

  max_idle_connections:
    description: |
      Maximum number of idle connections to the SQL database
      Idle connections will be retained until their `connections_max_lifetime_seconds` has been reached.
    default: 10

  connections_max_lifetime_seconds:
    description: |
      Sets the maximum amount of time a connection may be reused. Expired connections may be closed lazily before reuse.
      If value <= 0, connections are reused forever

      If there is a spike in connection usage, all of these connections have the potential to stick around with a high lifetime.
      Lowering the lifetime will result in connections getting reaped sooner, but the policy server may have to renegotiate connections
      more often, which could add some latency. We recommend using the default unless you have seen specific needs to change it.
    default: 3600

  disable:
    description: "Disable this monit job.  It will not run. Required for backwards compatability"
    default: false
