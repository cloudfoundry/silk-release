<%=
  require 'json'

  def db_param_path(name)
    "database.#{name}"
  end

  def db_param(name)
    if_p(db_param_path name) do |param|
      return param
    end.else do
      return nil
    end
  end

  def require_db_param(name)
    param = db_param name
    return param if !param.nil?

    raise "#{db_param_path name} must be specified"
  end

  def db_host
    from_property = db_param 'host'
    return from_property if !from_property.nil?

    if_link('database') do |db_link|
      instances = db_link.instances
      if instances.size > 0
        return instances[0].address
      end
    end

    raise "must provide database link or set #{db_param_path 'host'}"
  end

  user = require_db_param 'username'
  password = require_db_param 'password'
  port = require_db_param 'port'
  name = require_db_param 'name'
  driver = require_db_param 'type'

  unless driver == 'mysql' || driver == 'postgres'
    raise "unknown driver #{driver}"
  end

  def subnet_prefix_length
    size = p('subnet_prefix_length')
    if size < 1 || size > 30
      raise 'subnet_prefix_length must be a value between 1-30'
    end
    size
  end

  def parse_ip (ip, var_name)
    unless ip.empty?
        begin
          parsed = IPAddr.new ip
        rescue  => e
          raise "Invalid #{var_name} '#{ip}': #{e}"
        end
    end
  end

  parse_ip(p('network'), 'network')
  parse_ip(p('listen_ip'), 'listen_ip')

  toRender = {
    'debug_server_port' => p('debug_port'),
    'health_check_port' => p('health_check_port'),
    'listen_host' => p('listen_ip'),
    'listen_port' => p('listen_port'),
    'ca_cert_file' => '/var/vcap/jobs/silk-controller/config/certs/ca.crt',
    'server_cert_file' => '/var/vcap/jobs/silk-controller/config/certs/server.crt',
    'server_key_file' => '/var/vcap/jobs/silk-controller/config/certs/server.key',
    'network' => p('network'),
    'subnet_prefix_length' => subnet_prefix_length,
    'database' => {
      'type' => driver,
      'user' => user,
      'password' => password,
      'host' => db_host,
      'port' => port,
      'timeout' => p('database.connect_timeout_seconds'),
      'database_name' => name,
      'require_ssl' => p('database.require_ssl'),
      'ca_cert' => '/var/vcap/jobs/silk-controller/config/certs/database_ca.crt',
      'skip_hostname_validation' => p('database.skip_hostname_validation'),
    },
    'lease_expiration_seconds' => p('subnet_lease_expiration_hours') * 60 * 60,
    'metron_port' => p('metron_port'),
    'staleness_threshold_seconds' => 60*60,
    'metrics_emit_seconds' => 30,
    'log_prefix' => 'cfnetworking',
    'max_idle_connections' => p('max_idle_connections'),
    'max_open_connections' => p('max_open_connections'),
    'connections_max_lifetime_seconds' => p('connections_max_lifetime_seconds'),
  }

  JSON.pretty_generate(toRender)
%>
